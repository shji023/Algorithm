Hash Table: 키(Key)에 데이터(Value)를 저장하는 데이터 구조
python dictionary - Hash Table
Hash: 임의 값을 고정 길이로 변환하는 것 // 임의의 방대한 데이터도 고정된 길이로 바꿀 수 있다.
Hash Table: hash value, hash address와 slot을  가지고 있는 주소
Hashing Function (h(k)): Key를 입력받아 해쉬 테이블에 특정 주소 값을 리턴
slot: 한 개의 데이터를 저장할 수 있는 공간
공간과 탐색시간을 맞바꾸는 기법

hash table 만들기
hash_table = list([0 for i in range(10])
[0,0,0,0,0,0,0,0,0,0]

hash 함수 만들기
def hash_func(key):
    return key % 5

해쉬 테이블에 저장
data1 = 'Andy'
data2 = 'Dave'
data3 = 'Trump'

## ord(): 문자의 ASCII(아스키)코드 리턴
print (ord(data1[0]), ord(data2[0]), ord(data3[0]))
65 68 84
print (ord(data1[0]), hash_func(ord(data1[0])))
65 0

해쉬 테이블에 값 저장
def storage_data(data, value):
    key = ord(data[0])
    hash_address = hash_func(key)
    hash_table[hash_address] = value
=> 파이썬의 딕셔너리와 유사

EX)
storage_data('Andy', '01055553333')
storage_data('Dave', '01044443333')
storage_data('Trump', '01022223333')

데이터 읽어오기
def get_data(data):
    key = ord(data[0])
    hash_address = hash_func(key)
    return hash_table[hash_address]

get_data('Andy')
'01055553333'

완성 예제
hash_table = list([0 for i in range(8)])

def get_key(data):
    return hash(data)

def hash_function(key):
    return key % 8

def save_data(data, value):
    hash_address = hash_function(get_key(data))
    hash_table[hash_address] = value

def read_data(data):
    hash_address = hash_function(get_key(data))
    return hash_table[hash_address]

해시의 장점(해시를 쓰는 이유)
장점: 데이터 검색 속도가 빠름 (저장/ 읽기), key에 대한 데이터가 있는지에 대한 중복 확인이 쉬움
설명: 배열같은 경우는 중복 데이터를 찾을 때 기존 데이터에서 일일이 검색하여 찾아야함
반면, 해시는 바로 key값 해시함수 넣어서 주소 찾아서 있는지 없는지 확인가능

충돌 (collision) 해결 알고리즘
chaining 기법 (open hashing) 충돌이 발생한 데이터에 대해서 해쉬테이블 외부에 추가적인 데이터 공간 확보, 해결
링크드 리스트 추가로 연결 / 링크드 리스트에 있는 데이터를 서로 구분하기 위해 value 에 index_key값 추가
hash_table = list([0 for i in range(8)])

def get_key(data):
    return hash(data)

def hash_function(key):
    return key % 8

def save_data(data, value):
    index_key = get_key(data)
    hash_address = hash_function(index_key)
    if hash_table[hash_address] != 0:
        for index in range(len(hash_table[hash_address])):
            if hash_table[hash_address][index][0] == index_key:
                hash_table[hash_address][index][1] = value
                return
        hash_table[hash_address].append([index_key, value])
    else:
        hash_table[hash_address] = [[index_key, value]]

def read_data(data):
    index_key = get_key(data)
    hash_address = hash_function(index_key)

    if hash_table[hash_address] != 0:
        for index in range(len(hash_table[hash_address])):
            if hash_table[hash_address][index][0] == index_key:
                return hash_table[hash_address][index][1]
        return None
    else:
        return None

print (hash('Dave') % 8)
print (hash('Dd') % 8)
print (hash('Data') % 8)
0
2
2
Dd 와 Data 결과 동일한 hash address 값
save_data('Dd', '1201023010')
save_data('Data', '3301023010')
read_data('Dd')
'1201023010'
Dd 해당 value 출력

linear probing (close hashing) 기법 테이블안에서 빈공간을 찾아 충돌 해결
충돌이 일어나면, 해당 hash address의 다음 address부터 맨 처음 나오는 빈공간에 저장하는 기법
hash_table = list([0 for i in range(8)])

def get_key(data):
    return hash(data)

def hash_function(key):
    return key % 8

def save_data(data, value):
    index_key = get_key(data)
    hash_address = hash_function(index_key)
    if hash_table[hash_address] != 0:
        for index in range(hash_address, len(hash_table)):
            if hash_table[index] == 0:
                hash_table[index] = [index_key, value]
                return
            elif hash_table[index][0] == index_key:
                hash_table[index][1] = value
                return
    else:
        hash_table[hash_address] = [index_key, value]

def read_data(data):
    index_key = get_key(data)
    hash_address = hash_function(index_key)

    if hash_table[hash_address] != 0:
        for index in range(hash_address, len(hash_table)):
            if hash_table[index] == 0:
                return None
            elif hash_table[index][0] == index_key:
                return hash_table[index][1]
    else:
        return None

print (hash('dk') % 8)
print (hash('da') % 8)
동일한 hash address 값 나옴

save_data('dk', '01200123123')
save_data('da', '3333333333')
read_data('dk')
'01200123123'
dk 해당 value 출력