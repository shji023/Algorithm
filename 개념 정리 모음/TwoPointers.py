'''
배열의 특정 연속된 구간을 처리하는 경우
예시 1) 아래 수열에서 합이 5인 부분 연속 수열의 개수?
1, 2, 3, 2, 5
2, 3
3, 2
5
만약 데이터가 백만개라면?
데이터가 N개일 경우 시간복잡도는 O(N^2) -> 시간초과

투 포인터 방법: 리스트에 순차적으로 접근해야 할 때 두 개의 점을 이용해 위치를 기록하며 처리

1. start와 end이 인덱스 0을 가리키도록
2. 현재 부분 합이 M과 같다면, cnt +=1
3. 현재 부분 합이 M과 작거나 같다면, end +=1
4. 현재 부분 합이 M과 크다면, start +=1
5. 모든 경우 확인할 때까지 2번~4번 반복
'''
# 특정 합을 가지는 부분 연속 수열 찾기
n = 5 # 데이터의 개수 N
m = 5 # 찾고자 하는 부분합 M
data = [1, 2, 3, 2, 5] # 전체 수열

count = 0
interval_sum = 0
end = 0

# start를 차례대로 증가시키며 반복
for start in range(n):
    # end를 가능한 만큼 이동시키기
    while interval_sum < m and end < n:
        interval_sum += data[end]
        end += 1
    # 부분합이 m일 때 카운트 증가
    if interval_sum == m:
        count += 1
    interval_sum -= data[start]

print(count)

'''
정렬되어 있는 두 리스트의 합집합 - 병합정렬과 같은 알고리즘에서 사용
1. 정렬된 리스트 A 와 B 입력
2. 리스트 A에서 처리되지 않은 원소 중 가장 작은 원소를 i가 가리키도록
3. 리스트 B에서 처리되지 않은 원소 중 가장 작은 원소를 i가 가리키도록
4. A[i]와 B[j] 중 더 적은 원소를 결과 리스트에 담음
5. 더이상 처리할 원소가 없을 때 까지 2번~4번 반복
단순히 각 리스트의 모든 원소를 한 번씩만 순회하면 되기 때문에 O(N+M)의 시간 복잡도를 가짐
'''
# 사전에 정렬된 리스트 A와 B 선언
n, m = 3, 4
a = [1, 3, 5]
b = [2, 4, 6, 8]

# 리스트 A와 B의 모든 원소를 담을 수 있는 크기의 결과 리스트 초기화
result = [0] * (n + m)
i = 0
j = 0
k = 0

# 모든 원소가 결과 리스트에 담길 때까지 반복
while i < n or j < m:
    # 리스트 B의 모든 원소가 처리되었거나, 리스트 A의 원소가 더 작을 때
    if j >= m or (i < n and a[i] <= b[j]):
        # 리스트 A의 원소를 결과 리스트로 옮기기
        result[k] = a[i]
        i += 1
    # 리스트 A의 모든 원소가 처리되었거나, 리스트 B의 원소가 더 작을 때
    else:
        # 리스트 B의 원소를 결과 리스트로 옮기기
        result[k] = b[j]
        j += 1
    k += 1

# 결과 리스트 출력
for i in result:
    print(i, end=' ')
